version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUKET}/migration_2114d23)
            echo "$SUCCESS"
            # Logic for reverting the database state
            if [ "$SUCCESS" = "1" ];
            then

              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
             cd backend
             npm install
             npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run scan frontend
          command: |
             cd frontend
             npm install
             npm audit fix
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run scan backend 
          command: |
             cd backend
             npm install
             npm audit fix
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --region us-east-1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
    # Fetch the public IP of the EC2 instance and append it to the provided Ansible
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
    # persist the modified inventory file to the workspace so that we can use that file in the future jobs.
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure-infrastructure:
       # Select a Docker image that supports Ansible
    docker:
      - image: maramdocker/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fb:19:f8:d4:32:e1:6d:0e:47:5a:aa:a1:34:ba:d4:72"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml -vv
      # Here's where you will add some code to rollback on failure  
  run-migrations:
    docker:
      - image: maramdocker/aws-node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run premigrations
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run: 
          name: Send Migration Results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Sending migration status to kvdb.io ..."
              curl --insecure https://kvdb.io/${KVDB_BUKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}   -d '1'
              echo "curl command completed."
            fi 



  deploy-frontend:
    docker:
      - image: maramdocker/aws-node
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "API_URL=http://$BACKEND_IP:3030" 
            cd frontend
            echo "API_URL=http://$BACKEND_IP:3030" > .env
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      # Here's where you will add some code to rollback on failure                       
  deploy-backend:
    docker:
      - image: maramdocker/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fb:19:f8:d4:32:e1:6d:0e:47:5a:aa:a1:34:ba:d4:72"]
      - run:
          name: Deploy backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cd backend
            npm i
            npm run build
            echo "TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}" > .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
            echo "TYPEORM_MIGRATIONS=./dist/migrations/*.ts" >> .env
            tar -czf artifact.tar.gz dist/* package* .env
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ../.circleci/ansible/roles/deploy/
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
  smoke-test:
    docker:
      - image: maramdocker/aws-node
    steps:
      - checkout
      - run:
          name: Run backend smoke tests
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            backendUrl="http://$BACKEND_IP:3030/api/status"
            echo $backendUrl
          # if curl -s $backendUrl | grep "ok"
          # then
          #   echo "Smoke tests finished with success"
          #   exit 1
          # else
          #   echo "Smoke tests finished with failure"
          #   exit 11
          # fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 0
            fi

      - destroy-environment   
      - revert-migrations 

      # Here's where you will add some code to rollback on failure    

  cloudfront-update:
    docker:
      - image: maramdocker/aws-node
    steps:
      - checkout
      - run:
          name: Send old workflow id to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/${KVDB_BUKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      # - run:
      #     name: Update cloudfront distribution
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/cloudfront.yml \
      #         --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --stack-name InitialStack
      #       echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
      #       echo "current Wokflow ID: ${CIRCLE_WORKFLOW_ID:0:7}"

      # Here's where you will add some code to rollback on failure      
  cleanup:
    docker:
      - image: maramdocker/aws-node
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUKET}/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi
            echo "delete is confirmed"

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # # - smoke-test
      # #     requires: [deploy-backend, deploy-frontend]
      - cloudfront-update
      #     # requires: [smoke-test]
      #     requires: [deploy-backend, deploy-frontend]
      - cleanup:
          requires: [cloudfront-update]